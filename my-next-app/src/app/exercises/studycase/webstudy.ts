// h5转为rn：原生ui渲染，效率更高，流畅度，不用频繁操作dom。原生可以利用gpu能力。而h5受限于浏览器的性能。h5启用硬件加速，属性有限，trasform。渲染链路长。原生不受浏览器兼容性和安全沙箱限制
// 你的理解基本正确，但有几点需要注意：
// ---

// ### 1. **H5 的动态加载（如 import() 或 script 标签）**
// - H5 可以通过动态 import 或 script 标签按需加载 JS bundle，实现容器组件动态加载子组件。

// ### 2. **RN 的 bundle 机制**
// - React Native 默认只有一个 JS bundle（主包），所有组件都打包在一起。
// - 如果想实现“主包 + 动态子包”结构，需要用**多 bundle（多包）方案**，比如 [react-native-dynamic-bundle](https://github.com/guangqiang-liu/react-native-dynamic-bundle)、[react-native-code-push](https://github.com/microsoft/react-native-code-push) 或自研动态加载机制。

// ### 3. **迁移思路**
// - 主包（主 bundle）负责基础容器和路由逻辑。
// - 子包（子 bundle）可以是业务组件、页面等，按需下载和加载。
// - 你可以将 H5 的“容器+子组件”思想迁移到 RN，但**RN 动态加载 JS bundle 远比 H5 复杂**，需要原生层支持（如 CodePush、热更新、动态下发等）。

// ### 4. **逻辑复用**
// - 只要你的业务逻辑是纯 JS/TS，可以在主包和子包之间复用。
// - UI 层需要用 RN 的原生组件重写，不能直接复用 H5 的 DOM/HTML/CSS。

// ---

// **总结：**  
// - 可以用“主包+子包”思想迁移，但 RN 动态加载 bundle 需要特殊方案和原生支持。
// - 纯 JS 逻辑可复用，UI 需用 RN 组件重写。
// - 推荐先调研 CodePush、动态 bundle 方案，结合业务需求设计包结构。
// 


// 安全沙箱（Security Sandbox）是指浏览器为网页（尤其是 H5 页面）提供的一种隔离和限制机制，防止网页中的脚本随意访问本地资源或系统资源，保护用户安全。

// 具体表现：

// 网页 JS 不能直接访问本地文件、操作系统、硬件等敏感资源。
// 不同域名的网页之间不能随意操作彼此的数据（同源策略）。
// 只能通过浏览器暴露的安全 API 访问有限的功能。
// 作用：

// 防止恶意网页窃取用户隐私、破坏系统。
// 限制网页的权限，保护用户和操作系统的安全。
// 总结：
// 安全沙箱就是浏览器给网页套上的“安全围栏”，让网页只能在受控的环境里运行，不能随意越界访问系统资源。
const std = [
    {
      q: '',
      a: ''
    },
    {

    }
]

export default std