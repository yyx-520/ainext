// 针对成都云览科技有限公司面试准备
// 公司产品：凤凰浏览器
// 面试要点：简历熟悉->技术基础->技术追求（b端+c端）
// 1、性能优化相关
// 2、node
// 3、微前端
// 面试准备：
// 1.nodejs相关
// 2.说-下微前端
// qiankun：
// 3.项目中能体现技术力的地方
// 4.项目的架构层级是如何确定的
// 5.多终端部署和打包
// 6.说一下你的优势
// 1、硬指标：学历、技术背景、个人素质
// 2、软指标：
// a、研究原理，知其所以然
// b、技术应该解决场景问题，不是为了学技术而技术
// c、耐心与坚持
// 7.webpack部署到服务器后，所有地区都直接访问公司服务器吗
// 8.关于控制用户流量，前端如何帮助后端去预防崩溃?有做过防抖吗?
// 9.看过 vue 源码吗
// 10.对于下一个工作的期望是什么
// 11.为什么想看新的机会
// 12.防范XSS攻击
// 技术方向	可能要求	关联业务场景
// 跨端开发	React Native/Flutter	移动端浏览器开发（覆盖非洲/中东低端机）
// 性能优化	Web Workers/SSR	弱网环境下页面加载提速
// 多语言适配	i18n解决方案	支持25+语言的国际化需求
// 数据可视化	ECharts/D3	用户分布数据分析报表
// 浏览器兼容	WebExtension API/Polyfill	浏览器插件开发与兼容性处理

// 通用问题准备：
// 1、为什么看新机会：尝试拓宽自己的技术广度和深度，敏捷开发，无限突破自己的极限？风格：霸道风格
// 2、遇到过最难的问题是啥
// 以下是针对你背景的 **「最难技术卡点」回答策略**，既能体现技术深度，又自然展现能力边界：

// 2、反问：
// 凤凰浏览器在渲染引擎层是否做了定制优化？比如针对低内存设备的GC策略调整（低性能设备）？低网的时候怎么保证流畅运行。
// 国际化开发规范（RTL/多语言）
// 多个国家，所以做了一个bff层吗？设备性能低的时候并发请求处理更难了，bff层解决这个问题。
// 目前前端性能监控体系是如何搭建的？是否有非洲地区的Lighthouse指标基线数据
// 前端团队如何与本地化运营团队协作？比如阿拉伯语版本的UI测试流程
// 我能在前三个月给团队带来什么证明我的价值/未来解决的技术卡点在哪里



// 回答模块：
// ### **回答框架（STAR法则+技术边界表达）**
// **Situation（背景）**  
// > 在美团低代码平台维护期间，遇到神券节大促活动页**首屏加载卡顿**问题（原耗时3.2s），需在2周内优化至1.5s以内，且面临日均2000+页面差异化的挑战。

// **Task（任务）**  
// > 需要同时解决**通用优化方案**与**业务定制化需求**的矛盾：  
// > - 通用性：不能因优化破坏低代码平台的组件复用性；  
// > - 性能：需兼容不同业务线（外卖/闪购）的个性化组件加载。

// **Action（行动）**  
// **技术卡点与突破过程**：  
// 1. **问题定位**：  
//    - 发现瓶颈在于**接口串行调用**（商品/券信息分多次请求）和**未动态按需加载组件**；  
//    - 使用Chrome Performance面板分析，发现30%时间浪费在冗余CSS解析上。  

// 2. **技术边界探索**：  
//    - **方案1（常规思路）**：直接合并接口 → 但会破坏平台「模块化设计」原则（业务方后续无法单独更新某个模块）；  
//    - **方案2（创新解法）**：  
//      - 设计**接口动态聚合层**（Node中间层）：根据页面配置按需合并接口，保留模块化能力；  
//      - 开发**CSS原子化工具**：通过PostCSS自动提取首屏关键CSS，延迟非必要样式加载。  

// 3. **权衡与妥协**：  
//    - 曾尝试用WebAssembly优化计算逻辑，但发现**投入产出比不足**（仅提升5%性能，却增加维护成本），最终放弃。

// **Result（结果）**  
// > - 首屏耗时降至**1.1s**（提升65%），大促期间支撑峰值QPM 1亿+；  
// > - 动态聚合方案成为平台标准能力，后续复用至3个业务线。

// ---

// ### **如何自然体现技术边界？**
// 1. **展示探索过程**：  
//    - 对比不同方案（如WebAssembly尝试），说明**为何选择当前方案**，体现决策能力；  
// 2. **强调约束条件**：  
//    - 提到「不能破坏模块化」「需兼容多业务线」等限制，突出在复杂条件下的解题能力；  
// 3. **量化妥协点**：  
//    - 明确放弃WebAssembly的**具体原因**（5%收益 vs 高成本），展现成本意识。

// ---

// ### **避坑指南**
// - **忌「过度包装」**：不要虚构未掌握的技能（如声称精通WebAssembly）；  
// - **宜「留钩子」**：可提一句：  
//   > “后来了解到**React Server Components**可能更适合这类场景，计划后续深入研究。”  
//   （既体现学习意愿，又暗示当前边界）

// ---

// ### **参考话术**
// > “这次优化的技术边界在于：  
// > 1. **低代码平台的约束性**：不能为性能牺牲灵活性；  
// > 2. **技术方案的性价比**：需平衡ROI与长期维护成本；  
// > 3. **团队协作共识**：最终方案需通过多方评审。  
// > 这些限制反而帮助我更系统地思考问题本质。”

// ---

// 通过这种回答，你能：  
// ✅ 展现实战中的技术深度  
// ✅ 自然暴露能力边界（不显得短板）  
// ✅ 体现架构思维和业务权衡能力

// 其他问题答案：
// 以下是根据你的背景和经验的面试问题回答建议，结合技术深度与业务场景，突出专业性和严谨性：

// ---

### **1. Node.js相关**  
**回答要点**：  
> "在美团低代码平台中，我主要使用Node.js开发中间层服务：  
> - 设计**数据聚合层**，解决多接口串行调用问题，降低首屏耗时20%；  
> - 通过**SQL优化**（索引+查询重构）提升报表生成效率40%；  
> - 搭建**脚手架工具链**，集成ESLint规范、自动化测试和Tree-Shaking构建优化。"

---

### **2. 微前端**  
**回答框架**：  
> "我们采用**低代码平台+微前端**结合方案：
> - **业务隔离**：各业务线（外卖/闪购）独立开发部署，通过基座工程动态加载子应用；  
> - **技术栈无关**：支持Vue/React组件混用，通过Webpack Module Federation实现；  
> - **性能保障**：子应用预加载+运行时沙箱，避免全局污染，首屏加载速度优化35%。"

---

### **3. 项目中能体现技术力的地方**  
**回答示例**：  
> "在神券节大促保障中：  
> - **AI驱动效率**：基于LLM实现自然语言转页面功能，搭建效率提升50%；  
> - **高并发优化**：通过接口合并+容器预加载，支撑亿级QPM流量，秒开率从30%→60%；  
> - **组件迁移工具**：结合MCP框架自动化迁移Vue→React组件，效率提升80%。"

---

### **4. 项目的架构层级是如何确定的**  
**回答逻辑**：  
> "基于**业务复杂度**和**性能要求**分层设计：  
> 1. **基础层**：封装通用能力（监控/权限/路由），通过npm私有包管理；  
> 2. **业务层**：按领域拆分模块（营销/支付/商品），支持独立迭代；  
> 3. **接入层**：Node中间层处理数据聚合/CDN缓存，隔离前后端变更影响；  
> 4. **决策依据**：核心参考指标包括日均页面生成量（2000+）和容灾要求（SLA 99.99%）。"

---

### **5. 多终端部署和打包**  
**回答重点**：  
> "通过**统一工程化方案**解决多端问题：  
> - **构建隔离**：Webpack配置按环境输出（H5/小程序/PC），通过`process.env.TARGET`切换；  
> - **样式适配**：PostCSS插件自动转换REM/PX，配合媒体查询实现响应式；  
> - **差异部署**：CI/CD流水线自动识别git分支，分别部署到测试/生产环境。"

---

### **6. 说一下你的优势**  
**差异化亮点**：  
> "我的核心优势是**技术深度与业务落地结合能力**：  
> - **工程化**：主导低代码平台建设，日均支撑2000+页面生成；  
> - **智能化**：AI+低代码实践（LLM应用落地效率提升50%）；  
> - **高并发经验**：亿级流量优化经验（神券节QPM破亿保障）。"

---

### **7. Webpack部署后，所有地区都直接访问公司服务器吗？**  
**技术解析**：  
> "不是。我们采用**全球加速方案**：  
> - **静态资源**：通过CDN分级缓存（边缘节点就近分发），国内用阿里云CDN，海外接入Cloudflare；  cnd资源采用分级缓存，例如边缘节点。根服务器。
> - **动态请求**：API走BGP多线机房，配合智能DNS解析实现地域分流； 单ip向不同运营商广播，一个挂还能自动切两一个（bgp）、 智能DNS解析：通过dns判断用户所在地域， 将不同地域用户的DNS请求解析到最近的BGP机ip 为欧美、亚太用户分配本地机房IP，减少跨国延迟

> - **容灾策略**：当单点故障时，自动切换至备份节点（SLA保障99.95%）。" 需要考虑容灾

---

### **8. 前端如何帮助后端预防崩溃？做过防抖吗？**  
**实战案例**：  
> "前端是流控的第一道防线：  
> - **请求管控**：  
>   - 按钮级防抖：提交操作设置800ms冷却时间（神券节领券功能）；  
>   - 请求队列：高并发时限制并行接口数（max=5）；  
> - **降级方案**：  
>   - 静态兜底：当接口超时返回本地缓存数据；  
>   - 功能熔断：错误率>5%时自动隐藏非核心模块；  
> - **监控协同**：实时上报错误日志到Sentry，联动后端扩容。"

---

### **9. 看过Vue源码吗？**  
**严谨回答**：  
> "我深入研究过**核心模块实现**：  
> - **响应式原理**：基于`Object.defineProperty`（Vue2）/`Proxy`（Vue3）的依赖追踪；  
> - **虚拟DOM**：`patch`算法的diff优化（双端对比+key复用）；  
> - **编译优化**：模板转AST时的静态节点标记（Vue3）；  
> 但像编译器细节（parser生成器）等更底层实现，是我的后续学习重点。"

---

### **10. 对下一个工作的期望**  
**价值导向回答**：  
> "我希望参与**技术驱动业务增长**的项目：  
> - **领域方向**：深入前端工程化/智能化（如LLM+研发效能工具）；  
> - **团队期待**：与高水平团队共建复杂系统（如低代码平台/IDE工具链）；  
> - **成长空间**：在架构设计和技术规划维度获得更多挑战。"

---

### **11. 为什么想看新的机会？**  
**安全话术**：  
> "在美团积累了高并发和低代码的实战经验后，我希望：  
> - **技术突破**：接触更前沿的智能化场景（如AI编程助手）；  
> - **业务拓展**：参与国际化或创新业务线建设；  
> - **个人成长**：在更大技术挑战中突破能力边界。"

---

### **12. 防范XSS攻击**  
**全链路防御方案**：  
```markdown
1. **输入过滤**：
   - 富文本：用DOMPurify过滤敏感标签（`<script>`/`onerror`）；
   - 表单输入：正则校验限制特殊字符；
2. **输出转义**：
   - 服务端渲染：Mustache/Handlebars自动转义`{{content}}`；
   - 前端渲染：用`textContent`替代`innerHTML`；
3. **策略加固**：
   - CSP头部：设置`default-src 'self'`限制资源加载源； csp： debufal-src=self
   - Cookie标记：敏感Cookie设`HttpOnly`+`Secure`； cookie httponly Secure
4. **框架防护**：
   - Vue/React默认转义文本插值；
   - 禁用`v-html`/`dangerouslySetInnerHTML`除非必要。
```

---

### **回答技巧总结**  
- **技术问题**：用「场景+方案+结果」三段式结构（例：问题8）  
- **行为问题**：突出技术决策过程（例：问题3/4）  
- **敏感问题**：聚焦技术成长避免吐槽（例：问题11）  
- **弱点问题**：承认边界并展示学习路径（例：问题9）  

保持回答简洁（每个问题≤2分钟），预演高频问题可大幅提升通过率！ 




// 例如node基础知识相关、服务器相关、之前项目中体现技术难点、简单算法问题。
// fiber树的理解
// 之前复习过的必须非常熟悉
// 算法有些是说思路就行了
// ai技术细节
// ai的promote里面写具体怎么去梳理json结构（promote调试优化） 说说ai项目的基础 强调用node去调用的


// 二面问题
// 下一步大的产品规划是啥？对应技术的保障计划是啥？怎么留存或者增量用户
// 有大部分用户体验、反馈的收集，所以前端有啥监控吗？后台系统的有啥框架去收集、整理、结论出问题或者优化点的方案吗？洞察用户需求。
 跟我相关是我监控系统这边有经验，大模型产出优化是不是也可以搞一波（b端，我也有相关使用经验）
 //